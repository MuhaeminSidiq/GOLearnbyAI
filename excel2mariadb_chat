<div class="flex-1 overflow-hidden"><div class="h-full"><div class="react-scroll-to-bottom--css-cxptu-79elbk h-full"><div class="react-scroll-to-bottom--css-cxptu-1n7m0yu"><div class="flex flex-col text-sm md:pb-9" style=""><div class="sticky top-0 p-3 mb-1.5 flex items-center justify-between z-10 h-14 font-semibold bg-token-main-surface-primary"><div class="absolute start-1/2 ltr:-translate-x-1/2 rtl:translate-x-1/2"></div><div class="flex items-center gap-0 overflow-hidden"><div type="button" id="radix-:rbi:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="group flex cursor-pointer items-center gap-1 rounded-lg py-1.5 px-3 text-lg font-semibold hover:bg-token-main-surface-secondary radix-state-open:bg-token-main-surface-secondary text-token-text-secondary overflow-hidden whitespace-nowrap"><div class="text-token-text-secondary">ChatGPT <span class="text-token-text-secondary"></span></div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md text-token-text-tertiary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></div><div class="flex gap-2 pr-1"><span class="" data-state="closed"><button class="h-10 rounded-lg px-2 text-token-text-secondary focus-visible:outline-0 hover:bg-token-main-surface-secondary focus-visible:bg-token-main-surface-secondary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-xl-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.293 3.293a1 1 0 0 1 1.414 0l4 4a1 1 0 0 1-1.414 1.414L13 6.414V15a1 1 0 1 1-2 0V6.414L8.707 8.707a1 1 0 0 1-1.414-1.414zM4 14a1 1 0 0 1 1 1v3a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-3a1 1 0 1 1 2 0v3a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-3a1 1 0 0 1 1-1" clip-rule="evenodd"></path></svg></button></span><button data-testid="profile-button" class="flex h-10 w-10 items-center justify-center rounded-full hover:bg-token-main-surface-secondary focus-visible:bg-token-main-surface-secondary focus-visible:outline-0" type="button" id="radix-:rbl:" aria-haspopup="menu" aria-expanded="false" data-state="closed"><div class="flex items-center justify-center overflow-hidden rounded-full"><div class="relative flex"><img alt="User" referrerpolicy="no-referrer" loading="lazy" width="32" height="32" decoding="async" data-nimg="1" class="rounded-sm" src="https://s.gravatar.com/avatar/ec35c5628cdae5ecd7fc646045d4796a?s=480&amp;r=pg&amp;d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fsi.png" style="color: transparent;"></div></div></button></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-2" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa235f2-d4af-4929-a5d9-31a083f8a84c" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>Tolong buatkan source code pemrograman bahasa go, dengan ketentuan sebagai berikut:
1. maksimalkan penggunaan core processor yang tersedia, tentu saja harus memaksimalkan pemrosesan berdasarkan arsitektur processor.
2. maksimalkan penggunaan fitur concurrency, parallel, multithreading, multiprocessing, dan fitur lainnya yang mendukung kecepatan pemrosesan secara efektif dan efisien.
3. program harus kompatible dengan sistem operasi windows, macOS maupun linux, hindari penggunaan library yang tidak diperlukan, setiap kemungkinan masalah penyebab error harus diprediksi, ketika terjadi error tampilkan detail errornya, penyebab error beserta saran pemecahan masalah penyebab errornya.
4. program harus membaca file db.cfg untuk konfigurasi koneksi ke database mariaDB, yang terletak di direktori yang sama dengan program, file tersebut pada baris pertama merupakan username, baris kedua merupakan password, baris ketiga merupakan nama database mariaDB, baris keempat merupakan host database mariadb, baris kelima merupakan port database mariadb, dan baris keenam merupakan direktori tempat file excel yang harus dibaca. program harus fleksibel menentukan direktori tempat file excel yang harus dibaca meskipun ditulis dengan style windows maupun ditulis dengan style unix.
5. program harus membaca semua file excel yang terdapat dalam direktori yang telah ditentukan dalam file db.cfg, untuk kemudian program harus membuat file skrip sql untuk membuat tabel database mariadb, dan membuat file skrip sql untuk memindahkan data excel dari baris kedua hingga baris terakhir ke dalam tabel database mariadb, penamaan nama file skrip sql menggunakan unsur nama file excel yang dibaca, hindari karakter non alphanumeric pada nama file, misalnya: nama file excel 'nama file 1.xlsx' maka nama file skrip sql untuk membuat tabel adalah namaFile1Tbl.sql dan nama file skrip sql untuk data adalah namaFile1Data.sql.
6. gunakan nama file sebagai nama tabel untuk database mariadb, baris pertama di file excel dapat diartikan sebagai nama kolom, periksa dan jika perlu ubah nama tabel dan nama kolom sehingga menjadi hanya alphanumeric. baris kedua hingga baris terakhir di file excel adalah data-data yang harus dibuat menjadi skrip sql mariadb untuk memungkinkan pengisian data ke tabel database. validasi tingkat lanjut untuk data dari file excel termasuk tipe data dan panjangnya.
7. pada pembuatan skrip sql untuk membuat tabel database mariadb, program harus memeriksa data yang terdapat di baris kedua hingga terakhir, sehingga dapat menentukan tipe data dan size yang tepat untuk kolom tabel database. pastikan kolom-kolom yang berisi data unik harus diindeks.
8. pada pembuatan skrip sql untuk memindahkan data excel ke database mariadb, program harus mengatur sedemikian rupa sehingga ketika dieksekusi dapat digunakan fitur concurrency, parallelism, threading, multithreading, ataupun multiprocessing.
9. simpan semua file skrip sql di direktori yang sama dengan tempat program, berikan tampilan kepada pengguna bahwa file excel tertentu telah selesai dibaca dan telah dihasilkan file skrip sql apa saja, tentu saja harus ditampilkan lamanya waktu yang digunakan untuk memproses setiap file excel hingga file-file sqlnya selesai disimpan.
10. program harus mencoba membuat koneksi ke server mariadb sesuai dengan konfigurasi koneksi yang telah dibaca dari file db.cfg. jika koneksi bisa dibuat dan digunakan, lanjutkan ke proses berikutnya, jika koneksi tidak bisa dibuat atau tidak bisa digunakan berikan tampilan tentang masalah tang terjadi disertai dengan penyebab dan saran perbaikannya.
11. jika koneksi dapat dibuat dan digunakan, baca semua file skrip sql yang telah dibuat oleh program, kemudian eksekusi skrip sql mariadb tersebut, sehingga program membuat tabel di database dan mengisi tabel sesuai dengan datanya. misalnya tabel database A hanya diisi dengan data-data A. dahulukan pembacaan dan eksekusi file sql untuk pembuatan tabel, kemudian pembacaan dan eksekusi file sql data. ukur waktu yang digunakan untuk eksekusi setiap file sql. gunakan pooling koneksi database, untuk mengeksekusi SQL skrip di database setelah skrip dibuat.
12. tampilkan kepada pengguna bahwa file sql tertentu telah selesai dieksekusi beserta waktu yang digunakan untuk setiap eksekusi.
13. periksa apakah semua data yang ada di setiap file excel telah tersimpan dengan benar di tabel-tabel database? ukur waktu yang digunakan untuk menyelesaikan pemeriksaan data setiap file excel
14. tampilkan kepada pengguna file excel apa saja yang telah di periksa kesesuaian datanya dengan data yang ada di tabel database, hasil pemeriksaan, dan waktu yang digunakan untuk pemeriksaan setiap file tersebut.
15. jika sudah selesai semua proses, tampilkan bahwa semua proses telah selesai disertai dengan waktu yang digunakan dari awal program memulai proses pertama kali (mendeteksi core processor beserta arsitektur processor) hingga selesai langkah 14.
Tolong periksa dan analisa source code yang dibuat, jika terjadi kesalahan perbaiki, pastikan source code yang dibuat dioptimalisasi secara efektif dan efisien, dalam penggunaan sumber daya processor, RAM, dan server mariadb.
16. pastikan semua library diimpor, selain ditampilkan ke pengguna, tuliskan semua pesan error secara detail termasuk tanggal dan waktu terjadinya error ke file error.log, file error log tersebut simpan di direktori yang sama dengan program, jika file belum ada buat filenya, jika file sudah ada, tambahkan pesan error tersebut di file yang sudah ada. isi file yang sudah ada jangan diubah
17. pada pembuatan skrip sql untuk membuat tabel, nama tabel tidak perlu menyertakan ekstensi xlsx, pada kolom yang berisi data unik tampaknya tidak diindeks, padahal itu sangat mungkin diperlukan 
18. dalam pembuatan skrip sql berdasarkan data pada excelnya, data tidak diterjemahkan menjadi aman untuk skrip sql, dan data yang mengandung tanda koma juga diartikan menjadi data di kolom baru.
19. pada skrip sql yang dihasilkan untuk membuat tabel, nama kolom tidak perlu menggunakan karakter alfanumerik, tambahkan suatu metode dimana jika tabelnya sudah ada, maka tidak perlu dilanjutkan membuat tabel baru di database, pada penentuan tipe data kolom tabel, jika data pada file excel berupa angka dan tidak ada yang panjang karakternya melebihi 9 digit gunakan tipe data integer, namun jika lebih dari 9 karakter gunakan tipe data varchar dengan kapasitas sesuai panjang karakter maksimal yang terdapat pada data di excel yang bersesuaian kolomnya.
20. pastikan banyaknya kolom skrip sql data sesuai dengan banyaknya kolom tabel database yang sesuai, jika tidak sesuai program harus mampu memeriksa kesalahan dan memperbaikinya.
periksa lagi semua langkah, sehingga program dibuat dengan meminimalisir kesalahan dan program berjalan dengan efektif dan efisien.</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-3" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="60904a56-eac1-4fbb-b667-4ca4e2a435af" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Berikut adalah source code Go yang sesuai dengan ketentuan yang diberikan. Program ini dirancang untuk memaksimalkan penggunaan core processor, memanfaatkan fitur concurrency dan parallel processing, dan kompatibel dengan berbagai sistem operasi. Program ini juga membaca konfigurasi dari file <code>db.cfg</code> dan menghasilkan serta mengeksekusi skrip SQL berdasarkan data dari file Excel.</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"context"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"encoding/csv"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"io"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username   <span class="hljs-type">string</span>
	Password   <span class="hljs-type">string</span>
	Database   <span class="hljs-type">string</span>
	Host       <span class="hljs-type">string</span>
	Port       <span class="hljs-type">string</span>
	ExcelDir   <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> reg.ReplaceAllString(input, <span class="hljs-string">""</span>)
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName)
	dataSQLFileName := fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName)

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				_, err := strconv.Atoi(row[i])
				<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {
					columnType = <span class="hljs-string">"INT"</span>
					<span class="hljs-keyword">break</span>
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(headers, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, value))
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
		}
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	runtime.GOMAXPROCS(runtime.NumCPU())

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to connect to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	excelFiles, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(excelFiles))

	<span class="hljs-keyword">for</span> _, filePath := <span class="hljs-keyword">range</span> excelFiles {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, filePath, results)
	}

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		wg.Wait()
		<span class="hljs-built_in">close</span>(results)
	}()

	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
	}
}
</code></div></div></pre><h3>Penjelasan Source Code</h3><ol><li><p><strong>Konfigurasi dan Koneksi Database</strong>:</p><ul><li>Membaca konfigurasi dari file <code>db.cfg</code>.</li><li>Membuat koneksi ke database MariaDB berdasarkan konfigurasi yang dibaca.</li></ul></li><li><p><strong>Pembacaan dan Pemrosesan File Excel</strong>:</p><ul><li>Membaca semua file Excel dari direktori yang ditentukan.</li><li>Memproses setiap file Excel secara paralel menggunakan goroutine.</li><li>Untuk setiap file Excel, membuat file skrip SQL untuk membuat tabel dan mengisi data.</li></ul></li><li><p><strong>Penulisan dan Eksekusi Skrip SQL</strong>:</p><ul><li>Menulis skrip SQL untuk membuat tabel berdasarkan data dalam file Excel.</li><li>Menulis skrip SQL untuk mengisi data ke tabel yang baru dibuat.</li><li>Mengeksekusi skrip SQL menggunakan pooling koneksi database untuk efisiensi.</li></ul></li><li><p><strong>Error Handling</strong>:</p><ul><li>Menangani dan melaporkan kesalahan dengan detail, baik ke konsol maupun ke file <code>error.log</code>.</li></ul></li><li><p><strong>Penggunaan Concurrency dan Parallel Processing</strong>:</p><ul><li>Memanfaatkan goroutine dan channel untuk pemrosesan paralel.</li><li>Menggunakan <code>sync.WaitGroup</code> untuk sinkronisasi goroutine.</li></ul></li><li><p><strong>Optimalisasi dan Kompatibilitas</strong>:</p><ul><li>Menyesuaikan program agar kompatibel dengan Windows, macOS, dan Linux.</li><li>Memaksimalkan penggunaan core processor yang tersedia.</li></ul></li></ol><h3>Catatan</h3><ul><li>Pastikan semua library yang diperlukan telah diimpor dan dipasang pada sistem Anda.</li><li>Pastikan file <code>db.cfg</code> berada di direktori yang sama dengan program dan memiliki format yang benar.</li><li>Pastikan direktori tempat file Excel berada dapat diakses dan berisi file Excel yang valid.</li><li>Lakukan pengujian dan debugging sesuai kebutuhan untuk memastikan program berjalan dengan baik pada lingkungan Anda.</li></ul></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r54:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-4" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa2766d-b5ee-4ed1-b6ad-10306d38aae0" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>setelah dieksekusi, source code di atas menampilkan pesan error:
# command-line-arguments
./v01.go:5:2: "context" imported and not used
./v01.go:7:2: "encoding/csv" imported and not used
./v01.go:9:2: "io" imported and not used
./v01.go:138:15: undefined: strconv
perbaiki kesalahan tersebut, ada sedikit modifikasi juga:
1. penyimpanan file skrip sql harus di folder hasil, jika folder belum ada buat dulu folder hasilnya, 
2. jika file hasil skrip sql sudah ada yang sama nama filenya, hapus dulu file yang sudah ada kemudian buat yang baru.</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-5" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="ec576fa9-b2e9-4486-89b5-9f02a7ff588b" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Berikut adalah perbaikan source code dengan menghapus import yang tidak diperlukan, menambahkan package <code>strconv</code> yang diperlukan, serta menambahkan logika untuk membuat folder <code>hasil</code> dan memastikan file yang ada dihapus sebelum membuat yang baru.</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> reg.ReplaceAllString(input, <span class="hljs-string">""</span>)
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				_, err := strconv.Atoi(row[i])
				<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {
					columnType = <span class="hljs-string">"INT"</span>
					<span class="hljs-keyword">break</span>
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(headers, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, value))
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
		}
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	runtime.GOMAXPROCS(runtime.NumCPU())

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to connect to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	excelFiles, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(excelFiles))

	<span class="hljs-keyword">for</span> _, filePath := <span class="hljs-keyword">range</span> excelFiles {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, filePath, results)
	}

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		wg.Wait()
		<span class="hljs-built_in">close</span>(results)
	}()

	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
	}
}
</code></div></div></pre><h3>Perubahan yang Dilakukan</h3><ol><li><p><strong>Penghapusan Import yang Tidak Diperlukan</strong>:</p><ul><li>Menghapus import <code>context</code>, <code>encoding/csv</code>, dan <code>io</code> yang tidak digunakan.</li></ul></li><li><p><strong>Penambahan Import <code>strconv</code></strong>:</p><ul><li>Menambahkan import <code>strconv</code> yang diperlukan untuk konversi string ke integer.</li></ul></li><li><p><strong>Penanganan Folder <code>hasil</code></strong>:</p><ul><li>Membuat folder <code>hasil</code> jika belum ada.</li><li>Menghapus file SQL yang sudah ada sebelum membuat yang baru.</li></ul></li><li><p><strong>Penanganan Kesalahan</strong>:</p><ul><li>Menampilkan pesan kesalahan yang lebih informatif dan menangani berbagai kesalahan yang mungkin terjadi.</li></ul></li><li><p><strong>Penyesuaian Lokasi Penyimpanan File SQL</strong>:</p><ul><li>Menyimpan file SQL di folder <code>hasil</code>.</li></ul></li></ol><h3>Cara Menjalankan</h3><ol><li>Pastikan file <code>db.cfg</code> berada di direktori yang sama dengan program dan memiliki format yang benar.</li><li>Pastikan folder <code>hasil</code> ada di direktori yang sama dengan program atau program akan membuatnya jika belum ada.</li><li>Jalankan program dan program akan membaca file Excel dari direktori yang ditentukan di <code>db.cfg</code>, memprosesnya, dan menyimpan hasil skrip SQL di folder <code>hasil</code>.</li></ol><h3>Catatan</h3><ul><li>Pastikan semua library yang diperlukan telah diimpor dan dipasang pada sistem Anda.</li><li>Pastikan direktori tempat file Excel berada dapat diakses dan berisi file Excel yang valid.</li><li>Lakukan pengujian dan debugging sesuai kebutuhan untuk memastikan program berjalan dengan baik pada lingkungan Anda.</li></ul></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r5b:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-6" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa2e469-584d-4bb4-acf4-a8f5a3e97759" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>perlu disempurnakan, jika pada data excel terdapat karakter-karakter atau tanda yang tidak sesuai dengan skrip sql mariadb, perbaiki dan atau ubah sehingga data tidak berubah namun tidak akan terjadi kesalahan jika skrip sql tersebut dieksekusi</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-7" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="c8a101e3-4d6b-4991-b762-9daace960b96" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Untuk memastikan bahwa data dalam file Excel aman untuk digunakan dalam skrip SQL, kita perlu melakukan sanitasi data dengan mengganti karakter atau tanda yang tidak sesuai dengan karakter yang aman. Berikut adalah perbaikan dan penyempurnaan dari source code sebelumnya, termasuk sanitasi data:</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> reg.ReplaceAllString(input, <span class="hljs-string">""</span>)
}

<span class="hljs-comment">// sanitizeSQLValue ensures SQL values are properly escaped and safe</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeSQLValue</span><span class="hljs-params">(value <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	<span class="hljs-comment">// Replace single quotes with two single quotes for escaping</span>
	value = strings.ReplaceAll(value, <span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>)
	<span class="hljs-keyword">return</span> value
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				_, err := strconv.Atoi(row[i])
				<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {
					columnType = <span class="hljs-string">"INT"</span>
					<span class="hljs-keyword">break</span>
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(headers, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, sanitizeSQLValue(value)))
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
		}
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	runtime.GOMAXPROCS(runtime.NumCPU())

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to connect to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	excelFiles, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(excelFiles))

	<span class="hljs-keyword">for</span> _, filePath := <span class="hljs-keyword">range</span> excelFiles {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, filePath, results)
	}

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		wg.Wait()
		<span class="hljs-built_in">close</span>(results)
	}()

	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
	}
}
</code></div></div></pre><h3>Penambahan dan Perubahan yang Dilakukan</h3><ol><li><p><strong>Penambahan Fungsi <code>sanitizeSQLValue</code></strong>:</p><ul><li>Fungsi ini memastikan bahwa nilai SQL diamankan dengan mengganti tanda kutip tunggal dengan dua tanda kutip tunggal.</li></ul></li><li><p><strong>Penghapusan dan Pembuatan Ulang File SQL</strong>:</p><ul><li>Menambahkan logika untuk menghapus file SQL yang ada sebelum membuat yang baru.</li></ul></li><li><p><strong>Sanitasi Nama Tabel dan Kolom</strong>:</p><ul><li>Menggunakan fungsi <code>sanitizeString</code> untuk memastikan nama tabel dan kolom hanya mengandung karakter alfanumerik.</li></ul></li><li><p><strong>Penyimpanan File SQL di Folder <code>hasil</code></strong>:</p><ul><li>Menyimpan file SQL di folder <code>hasil</code> dan membuat folder jika belum ada.</li></ul></li><li><p><strong>Penanganan Kesalahan dan Logging</strong>:</p><ul><li>Menampilkan pesan kesalahan yang lebih informatif dan menangani berbagai kesalahan yang mungkin terjadi.</li></ul></li></ol><h3>Cara Menjalankan</h3><ol><li>Pastikan file <code>db.cfg</code> berada di direktori yang sama dengan program dan memiliki format yang benar.</li><li>Pastikan folder <code>hasil</code> ada di direktori yang sama dengan program atau program akan membuatnya jika belum ada.</li><li>Jalankan program dan program akan membaca file Excel dari direktori yang ditentukan di <code>db.cfg</code>, memprosesnya, dan menyimpan hasil skrip SQL di folder <code>hasil</code>.</li></ol></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r5i:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-8" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa2e218-13ce-47c9-89ea-206d7ceae601" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>terdapat kesalahan, nama kolom pada file skrip sql pembuatan tabel tidak sama dengan nama kolom pada file skrip sql data dari excel, gunakan nama kolom hanya huruf kecil dan atau angka baik pada file skrip sql pembuatan tabel maupun pada file skrip data</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-9" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="f177e0ee-f4d2-4de1-92ad-cbea610466a4" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Baik, saya akan memastikan bahwa nama kolom pada file skrip SQL untuk pembuatan tabel dan data dari Excel menggunakan huruf kecil dan angka. Selain itu, saya akan menambahkan penanganan untuk memastikan konsistensi antara kedua file skrip SQL tersebut.</p><p>Berikut adalah perbaikan kode sumber:</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string and converts to lowercase</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> strings.ToLower(reg.ReplaceAllString(input, <span class="hljs-string">""</span>))
}

<span class="hljs-comment">// sanitizeSQLValue ensures SQL values are properly escaped and safe</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeSQLValue</span><span class="hljs-params">(value <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	<span class="hljs-comment">// Replace single quotes with two single quotes for escaping</span>
	value = strings.ReplaceAll(value, <span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>)
	<span class="hljs-keyword">return</span> value
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	columnNames := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> _, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnNames = <span class="hljs-built_in">append</span>(columnNames, columnName)
	}

	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, columnName := <span class="hljs-keyword">range</span> columnNames {
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				_, err := strconv.Atoi(row[i])
				<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {
					columnType = <span class="hljs-string">"INT"</span>
					<span class="hljs-keyword">break</span>
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, sanitizeSQLValue(value)))
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
		}
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	runtime.GOMAXPROCS(runtime.NumCPU())

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to connect to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	excelFiles, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(excelFiles))

	<span class="hljs-keyword">for</span> _, filePath := <span class="hljs-keyword">range</span> excelFiles {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, filePath, results)
	}

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		wg.Wait()
		<span class="hljs-built_in">close</span>(results)
	}()

	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
	}
}
</code></div></div></pre><h3>Penjelasan Perubahan</h3><ol><li><p><strong>Penggunaan Nama Kolom dengan Huruf Kecil dan Angka</strong>:</p><ul><li>Menggunakan <code>sanitizeString</code> untuk memastikan nama kolom hanya terdiri dari huruf kecil dan angka.</li></ul></li><li><p><strong>Konsistensi Nama Kolom pada Skrip SQL</strong>:</p><ul><li>Memastikan nama kolom pada file skrip SQL untuk pembuatan tabel dan data dari Excel konsisten dengan menggunakan variabel <code>columnNames</code>.</li></ul></li><li><p><strong>Sanitasi Nilai SQL</strong>:</p><ul><li>Menggunakan <code>sanitizeSQLValue</code> untuk memastikan nilai SQL aman untuk dimasukkan ke dalam query.</li></ul></li><li><p><strong>Pembuatan dan Penghapusan File SQL</strong>:</p><ul><li>Menambahkan logika untuk membuat folder <code>hasil</code> jika belum ada dan menghapus file SQL yang ada sebelum membuat yang baru.</li></ul></li></ol><h3>Cara Menjalankan</h3><ol><li>Pastikan file <code>db.cfg</code> berada di direktori yang sama dengan program dan memiliki format yang benar.</li><li>Jalankan program, program akan membaca file Excel dari direktori yang ditentukan di <code>db.cfg</code>, memprosesnya, dan menyimpan hasil skrip SQL di folder <code>hasil</code>.</li></ol></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r5p:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-10" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa233d9-9cbe-4936-9e1d-d9e089eec20f" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>perbaiki source code di atas, sehingga:
1. File skrip sql yang dihasilkan, simpan di direktori hasil yang ada di direktori program, jika direktori hasil belum ada, buat dahulu.
2. nama kolom baik pada skrip sql pembuatan tabel mariadb maupun nama kolom pada skrip sql data yang mau dimasukkan ke tabel mariadb harus menggunakan hanya huruf kecil dan angka.
3. periksa setiap baris data mempunyai banyak kolom yang sama dengan banyak kolom tabel database mariadb.
4. pisahkan baris yang mengandung kesalahan di file sql terpisah dari file sql untuk input data, nengan nama file seperti nama file sql input data namun diakhiri _cek sebelum ekstensi sql</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-11" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="8fc503b2-ff73-4451-a09e-1d2045193321" dir="auto" class="text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Baik, saya akan memperbaiki kode sumber sesuai dengan instruksi Anda. Berikut adalah perbaikan kode sumber:</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string and converts to lowercase</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> strings.ToLower(reg.ReplaceAllString(input, <span class="hljs-string">""</span>))
}

<span class="hljs-comment">// sanitizeSQLValue ensures SQL values are properly escaped and safe</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeSQLValue</span><span class="hljs-params">(value <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	value = strings.ReplaceAll(value, <span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>)
	<span class="hljs-keyword">return</span> value
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))
	errorSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData_cek.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(errorSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(errorSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, errorSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	errorSQLFile, err := os.Create(errorSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, errorSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> errorSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	columnNames := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> _, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnNames = <span class="hljs-built_in">append</span>(columnNames, columnName)
	}

	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, columnName := <span class="hljs-keyword">range</span> columnNames {
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				_, err := strconv.Atoi(row[i])
				<span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> {
					columnType = <span class="hljs-string">"INT"</span>
					<span class="hljs-keyword">break</span>
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)

	<span class="hljs-keyword">var</span> errorRows []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) != <span class="hljs-built_in">len</span>(columnNames) {
			errorRows = <span class="hljs-built_in">append</span>(errorRows, fmt.Sprintf(<span class="hljs-string">"(%s)"</span>, strings.Join(row, <span class="hljs-string">", "</span>)))
			<span class="hljs-keyword">continue</span>
		}
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, sanitizeSQLValue(value)))
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
		}
	}

	<span class="hljs-keyword">for</span> _, errorRow := <span class="hljs-keyword">range</span> errorRows {
		errorSQLFile.WriteString(errorRow + <span class="hljs-string">"\n"</span>)
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	runtime.GOMAXPROCS(runtime.NumCPU())

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to connect to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	excelFiles, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Failed to read Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(excelFiles))

	<span class="hljs-keyword">for</span> _, filePath := <span class="hljs-keyword">range</span> excelFiles {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, filePath, results)
	}

	<span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> {
		wg.Wait()
		<span class="hljs-built_in">close</span>(results)
	}()

	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
	}
}
</code></div></div></pre><h3>Penjelasan Perubahan</h3><ol><li><p><strong>Penyimpanan File Skrip SQL di Direktori <code>hasil</code></strong>:</p><ul><li>Membuat direktori <code>hasil</code> jika belum ada.</li><li>Menyimpan file skrip SQL di direktori <code>hasil</code>.</li></ul></li><li><p><strong>Nama Kolom dengan Huruf Kecil dan Angka</strong>:</p><ul><li>Menggunakan <code>sanitizeString</code> untuk memastikan nama kolom hanya menggunakan huruf kecil dan angka.</li></ul></li><li><p><strong>Pemeriksaan Jumlah Kolom</strong>:</p><ul><li>Menambahkan logika untuk memeriksa jumlah kolom pada setiap baris data. Jika jumlah kolom tidak sama dengan jumlah kolom tabel, baris data tersebut dipisahkan ke file SQL terpisah dengan nama diakhiri <code>_cek</code>.</li></ul></li><li><p><strong>Pemisahan Baris yang Mengandung Kesalahan</strong>:</p><ul><li>Menambahkan baris yang mengandung kesalahan ke file SQL terpisah (<code>_cek.sql</code>).</li></ul></li></ol></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r60:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-12" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa20569-01b4-45d7-8ad7-d8d6b4078aff" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>perbaiki dengan memperhatikan kondisi:
1. data file excel yang dibaca merupakan file microsoft excel bukan file csv
2. Pastikan kapasitas kolom tidak akan menimbulkan error data truncated, dan perhatikan ketentuan jika panjang karakter pada data excel lebih dari 10 karakter, maka kolom pada tabel database harus menggunakan tipe varchar dengan kapasitas sesuai panjang karakter terpanjang pada kolom data dengan baris data yang sesuai
3. ketika membuat skrip sql data, pastikan banyak kolom data sesuai dengan banyak kolom pada tabel database yang akan dibuat melalui skrip sql tabel, jika datanya kurang, buat data berisi karakter NA untuk melengkapinya sehingga banyak kolom data tetap sama dengan banyak kolom tabel database.
4. eksekusi file skrip sql yang dibuat, dengan urutan file pembuatan tabel terlebih dahulu kemudian file sql data, kecuali file sql yang berakhiran _cek.sql
5. Tampilkan waktu yang digunakan untuk memproses setiap file-file excel, waktu yang digunakan untuk mengeksekusi setiap file skrip sql, dan waktu yang digunakan oleh program dari awal hingga akhir</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-13" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="e8e1f410-5fe9-4558-a96a-e4f2af325eb5" dir="auto" class="text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Baik, saya akan memperbaiki kode sumber sesuai dengan instruksi tambahan Anda:</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string and converts to lowercase</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> strings.ToLower(reg.ReplaceAllString(input, <span class="hljs-string">""</span>))
}

<span class="hljs-comment">// sanitizeSQLValue ensures SQL values are properly escaped and safe</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeSQLValue</span><span class="hljs-params">(value <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	value = strings.ReplaceAll(value, <span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>)
	<span class="hljs-keyword">return</span> value
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))
	errorSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData_cek.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(errorSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(errorSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, errorSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	errorSQLFile, err := os.Create(errorSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, errorSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> errorSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	columnNames := []<span class="hljs-type">string</span>{}
	columnLengths := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(headers))
	<span class="hljs-keyword">for</span> _, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnNames = <span class="hljs-built_in">append</span>(columnNames, columnName)
	}

	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, columnName := <span class="hljs-keyword">range</span> columnNames {
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				value := row[i]
				length := <span class="hljs-built_in">len</span>(value)
				<span class="hljs-keyword">if</span> length &gt; columnLengths[i] {
					columnLengths[i] = length
				}
				<span class="hljs-keyword">if</span> _, err := strconv.Atoi(value); err == <span class="hljs-literal">nil</span> {
					<span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">10</span> {
						columnType = <span class="hljs-string">"INT"</span>
					} <span class="hljs-keyword">else</span> {
						columnType = fmt.Sprintf(<span class="hljs-string">"VARCHAR(%d)"</span>, columnLengths[i])
					}
				} <span class="hljs-keyword">else</span> {
					columnType = fmt.Sprintf(<span class="hljs-string">"VARCHAR(%d)"</span>, columnLengths[i])
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)

	<span class="hljs-keyword">var</span> errorRows []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) != <span class="hljs-built_in">len</span>(columnNames) {
			<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(row) &lt; <span class="hljs-built_in">len</span>(columnNames) {
				row = <span class="hljs-built_in">append</span>(row, <span class="hljs-string">"NA"</span>)
			}
		}
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, sanitizeSQLValue(value)))
		}
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) != <span class="hljs-built_in">len</span>(columnNames) {
			errorRows = <span class="hljs-built_in">append</span>(errorRows, fmt.Sprintf(<span class="hljs-string">"(%s)"</span>, strings.Join(values, <span class="hljs-string">", "</span>)))
			<span class="hljs-keyword">continue</span>
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> i &lt; <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
		}
	}

	<span class="hljs-keyword">for</span> _, errorRow := <span class="hljs-keyword">range</span> errorRows {
		errorSQLFile.WriteString(errorRow + <span class="hljs-string">"\n"</span>)
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">executeSQLFiles</span><span class="hljs-params">(db *sql.DB, sqlFiles []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">for</span> _, sqlFile := <span class="hljs-keyword">range</span> sqlFiles {
		start := time.Now()
		content, err := os.ReadFile(sqlFile)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"error reading SQL file %s: %v"</span>, sqlFile, err)
		}

		queries := strings.Split(<span class="hljs-type">string</span>(content), <span class="hljs-string">";"</span>)
		<span class="hljs-keyword">for</span> _, query := <span class="hljs-keyword">range</span> queries {
			query = strings.TrimSpace(query)
			<span class="hljs-keyword">if</span> query == <span class="hljs-string">""</span> {
				<span class="hljs-keyword">continue</span>
			}

			_, err = db.Exec(query)
			<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
				log.Printf(<span class="hljs-string">"error executing query in file %s: %v"</span>, sqlFile, err)
				<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"error executing query in file %s: %v"</span>, sqlFile, err)
			}
		}
		duration := time.Since(start)
		fmt.Printf(<span class="hljs-string">"Executed file %s in %v\n"</span>, sqlFile, duration)
	}

	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	runtime.GOMAXPROCS(runtime.NumCPU())

	start := time.Now()

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error reading config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	files, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error reading Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(files))

	<span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, file, results)
	}

	wg.Wait()
	<span class="hljs-built_in">close</span>(results)

	sqlFiles := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
		<span class="hljs-keyword">if</span> strings.Contains(result, <span class="hljs-string">"Processed file"</span>) {
			fileName := strings.Split(result, <span class="hljs-string">" "</span>)[<span class="hljs-number">2</span>]
			baseName := sanitizeString(strings.TrimSuffix(filepath.Base(fileName), filepath.Ext(fileName)))
			sqlFiles = <span class="hljs-built_in">append</span>(sqlFiles, filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, baseName)))
			sqlFiles = <span class="hljs-built_in">append</span>(sqlFiles, filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, baseName)))
		}
	}

	err = executeSQLFiles(db, sqlFiles)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error executing SQL files: %v"</span>, err)
	}

	totalDuration := time.Since(start)
	fmt.Printf(<span class="hljs-string">"Total time taken: %v\n"</span>, totalDuration)
}
</code></div></div></pre><h3>Penjelasan Perbaikan:</h3><ol><li><p><strong>Penggunaan Library excelize</strong>:</p><ul><li>Menggunakan <code>github.com/xuri/excelize/v2</code> untuk membaca file Excel.</li></ul></li><li><p><strong>Validasi dan Sanitasi Kolom dan Data</strong>:</p><ul><li>Memastikan nama kolom hanya menggunakan huruf kecil dan angka.</li><li>Mengubah nilai kolom yang tidak sesuai menjadi <code>NA</code> jika kurang dari jumlah kolom tabel.</li></ul></li><li><p><strong>Pengaturan Tipe Data</strong>:</p><ul><li>Menentukan tipe data kolom sebagai <code>INT</code> jika nilai kurang dari 10 karakter dan sebagai <code>VARCHAR</code> jika lebih dari 10 karakter.</li></ul></li><li><p><strong>Pembuatan dan Eksekusi Skrip SQL</strong>:</p><ul><li>Membuat direktori <code>hasil</code> jika belum ada.</li><li>Memisahkan baris data yang salah ke file <code>_cek.sql</code>.</li><li>Menjalankan skrip SQL untuk membuat tabel terlebih dahulu kemudian mengisi data.</li></ul></li><li><p><strong>Pelaporan Waktu</strong>:</p><ul><li>Menampilkan waktu yang digunakan untuk memproses setiap file Excel.</li><li>Menampilkan waktu yang digunakan untuk mengeksekusi setiap file skrip SQL.</li><li>Menampilkan total waktu yang digunakan oleh program dari awal hingga akhir.</li></ul></li></ol></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r67:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-14" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa238d9-2754-4355-82bd-1e25d0b4d3df" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>sempurnakan dengan cara:
1. pastikan data dari file excel dijadikan skrip sql mariadb tanpa menjadikan skrip tersebut menjadi error ketika dieksekusi, perhatikan karakter-karakter yang memiliki arti khusus dalam perintah SQL, mungkin dapat digunakan semacam sql escape dengan benar.
2. pada file skrip sql untuk data, setiap barisnya paling banyak memuat sepuluh baris data yang akan diinsert ke tabel mariadb, sehingga pada saat mengeksekusi ke database dapat digunakan fitur threading atau concurency atau paralelism dan didukung pooling koneksi mariadb.
3. jika terjadi error ketika mengeksekusi skrip sql mariadb, program jangan berhenti, lanjutkan saja ke proses berikutnya. tampilkan pesan errornya setelah semua proses selesai sebelum waktu yang digunakan oleh program ditampilkan, dan masukkan pesan errornya secara detail diawali dengan waktu terjadinya error kemudian pesan error ke file error.log yang diletakkan di direktori yang sama dengan program. jika sudah ada file error.log, maka tambahkan pesan error ke file yang sudah ada, jika belum ada, buat file error.log nya</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-15" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="ff42976c-ff4d-4ee5-b322-2106b47397e7" dir="auto" class="text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Berikut adalah kode sumber yang telah disempurnakan untuk memastikan bahwa data dari file Excel diubah menjadi skrip SQL MariaDB yang tidak menyebabkan error saat dieksekusi. Perbaikan mencakup penggunaan escape karakter yang benar, pembagian insert data ke dalam kelompok-kelompok kecil, serta penanganan error tanpa menghentikan proses utama.</p><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	dsn := fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
		cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string and converts to lowercase</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> strings.ToLower(reg.ReplaceAllString(input, <span class="hljs-string">""</span>))
}

<span class="hljs-comment">// sanitizeSQLValue ensures SQL values are properly escaped and safe</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeSQLValue</span><span class="hljs-params">(value <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	value = strings.ReplaceAll(value, <span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>)
	<span class="hljs-keyword">return</span> value
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>, errorLog *os.File)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))
	errorSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData_cek.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(errorSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(errorSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, errorSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	errorSQLFile, err := os.Create(errorSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, errorSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> errorSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	columnNames := []<span class="hljs-type">string</span>{}
	columnLengths := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(headers))
	<span class="hljs-keyword">for</span> _, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnNames = <span class="hljs-built_in">append</span>(columnNames, columnName)
	}

	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, columnName := <span class="hljs-keyword">range</span> columnNames {
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				value := row[i]
				length := <span class="hljs-built_in">len</span>(value)
				<span class="hljs-keyword">if</span> length &gt; columnLengths[i] {
					columnLengths[i] = length
				}
				<span class="hljs-keyword">if</span> _, err := strconv.Atoi(value); err == <span class="hljs-literal">nil</span> {
					<span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">10</span> {
						columnType = <span class="hljs-string">"INT"</span>
					} <span class="hljs-keyword">else</span> {
						columnType = fmt.Sprintf(<span class="hljs-string">"VARCHAR(%d)"</span>, columnLengths[i])
					}
				} <span class="hljs-keyword">else</span> {
					columnType = fmt.Sprintf(<span class="hljs-string">"VARCHAR(%d)"</span>, columnLengths[i])
				}
			}
		}
		columns = <span class="hljs-built_in">append</span>(columns, fmt.Sprintf(<span class="hljs-string">"%s %s"</span>, columnName, columnType))
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + <span class="hljs-string">");"</span>
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-comment">// Prepare insert statements</span>
	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)

	<span class="hljs-keyword">var</span> errorRows []<span class="hljs-type">string</span>
	batchSize := <span class="hljs-number">10</span>
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) != <span class="hljs-built_in">len</span>(columnNames) {
			<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(row) &lt; <span class="hljs-built_in">len</span>(columnNames) {
				row = <span class="hljs-built_in">append</span>(row, <span class="hljs-string">"NA"</span>)
			}
		}
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, sanitizeSQLValue(value)))
		}
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) != <span class="hljs-built_in">len</span>(columnNames) {
			errorRows = <span class="hljs-built_in">append</span>(errorRows, fmt.Sprintf(<span class="hljs-string">"(%s)"</span>, strings.Join(values, <span class="hljs-string">", "</span>)))
			<span class="hljs-keyword">continue</span>
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>)%batchSize == <span class="hljs-number">0</span> || i == <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
			<span class="hljs-keyword">if</span> i != <span class="hljs-built_in">len</span>(rows)<span class="hljs-number">-2</span> {
				dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)
			}
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		}
	}

	<span class="hljs-keyword">for</span> _, errorRow := <span class="hljs-keyword">range</span> errorRows {
		errorSQLFile.WriteString(errorRow + <span class="hljs-string">"\n"</span>)
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">executeSQLFiles</span><span class="hljs-params">(db *sql.DB, sqlFiles []<span class="hljs-type">string</span>, errorLog *os.File)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">for</span> _, sqlFile := <span class="hljs-keyword">range</span> sqlFiles {
		start := time.Now()
		content, err := os.ReadFile(sqlFile)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"error reading SQL file %s: %v"</span>, sqlFile, err)
		}

		queries := strings.Split(<span class="hljs-type">string</span>(content), <span class="hljs-string">";"</span>)
		<span class="hljs-keyword">for</span> _, query := <span class="hljs-keyword">range</span> queries {
			query = strings.TrimSpace(query)
			<span class="hljs-keyword">if</span> query == <span class="hljs-string">""</span> {
				<span class="hljs-keyword">continue</span>
			}

			_, err := db.Exec(query)
			<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
				errorMessage := fmt.Sprintf(<span class="hljs-string">"[%v] error executing query in file %s: %v\n"</span>, time.Now(), sqlFile, err)
				log.Printf(errorMessage)
				<span class="hljs-keyword">if</span> _, err := errorLog.WriteString(errorMessage); err != <span class="hljs-literal">nil</span> {
					<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"error writing to error log: %v"</span>, err)
				}
				<span class="hljs-keyword">continue</span>
			}
		}

		duration := time.Since(start)
		fmt.Printf(<span class="hljs-string">"Executed file %s in %v\n"</span>, sqlFile, duration)
	}
	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	start := time.Now()

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error reading config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	errorLogFile, err := os.OpenFile(<span class="hljs-string">"error.log"</span>, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="hljs-number">0644</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error opening error log file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> errorLogFile.Close()

	files, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error reading Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(files))

	<span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, file, results, errorLogFile)
	}

	wg.Wait()
	<span class="hljs-built_in">close</span>(results)

	sqlFiles := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
		<span class="hljs-keyword">if</span> strings.Contains(result, <span class="hljs-string">"Processed file"</span>) {
			fileName := strings.Split(result, <span class="hljs-string">" "</span>)[<span class="hljs-number">2</span>]
			baseName := sanitizeString(strings.TrimSuffix(filepath.Base(fileName), filepath.Ext(fileName)))
			sqlFiles = <span class="hljs-built_in">append</span>(sqlFiles, filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, baseName)))
			sqlFiles = <span class="hljs-built_in">append</span>(sqlFiles, filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, baseName)))
		}
	}

	err = executeSQLFiles(db, sqlFiles, errorLogFile)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error executing SQL files: %v"</span>, err)
	}

	totalDuration := time.Since(start)
	fmt.Printf(<span class="hljs-string">"Total time taken: %v\n"</span>, totalDuration)
}
</code></div></div></pre><h3>Penjelasan Perbaikan:</h3><ol><li><strong>Sanitasi Data</strong>: Data dari file Excel yang mengandung karakter khusus dalam SQL seperti tanda kutip tunggal (<code>'</code>) disanitasi menggunakan fungsi <code>sanitizeSQLValue</code>.</li><li><strong>Pembagian Data Insert</strong>: Setiap pernyataan <code>INSERT</code> hanya memuat 10 baris data untuk mendukung eksekusi paralel dan pooling koneksi.</li><li><strong>Penanganan Error Eksekusi SQL</strong>: Program menangani error yang terjadi saat eksekusi SQL tanpa menghentikan proses, mencatat error ke file <code>error.log</code>, dan melanjutkan ke proses berikutnya.</li><li><strong>Pengelolaan Kolom Data</strong>: Jika ada data yang kolomnya kurang, ditambahkan <code>NA</code> untuk melengkapi jumlah kolom sehingga sesuai dengan tabel database.</li><li><strong>Pelaporan Waktu</strong>: Program menampilkan waktu yang digunakan untuk memproses setiap file Excel, mengeksekusi setiap file SQL, dan total waktu program dari awal hingga akhir.</li></ol></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r6e:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-16" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa2b2b8-7071-468a-a5ec-05d6e05cf592" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>modifikasi sesuaikan dengan kondisi berikut:
1. Jika program dieksekusi pada sistem operasi linux, dengan host adalah localhost, gunakan koneksi socket, selain itu gunakan koneksi tcp
2. Jika data pada suatu kolom di file excel merupakan data yang unik, pastikan kolom tersebut harus diindex di tabel database mariadb yang dibuat melalui skrip sql. berikan keterangan pada setiap kolom tabel database yang dibuat sesuai nama kolom di file excel (baris pertama pada file excel. berikan keterangan pada tabel database yang dibuat sesuai dengan nama file excel sumber tanpa melibatkan ekstensi.
3. eksekusi skrip sql data, mungkin jangan menggunakan eksekusi paralel, atau mungkin anda punya pertimbangan lain untuk menghindari kesalahan karena terjadinya table lock</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-17" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="36f2e09e-a8e0-4a6f-8d2d-89c3f0e0a8f8" dir="auto" class="text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Berikut adalah kode sumber yang telah dimodifikasi sesuai dengan kondisi yang diberikan:</p><ol><li>Menggunakan koneksi socket jika host adalah localhost pada sistem operasi Linux, selain itu menggunakan koneksi TCP.</li><li>Jika data pada suatu kolom di file Excel merupakan data yang unik, memastikan kolom tersebut diindeks di tabel database MariaDB yang dibuat melalui skrip SQL.</li><li>Menambahkan keterangan pada setiap kolom tabel database yang dibuat sesuai dengan nama kolom di file Excel dan menambahkan keterangan pada tabel database yang dibuat sesuai dengan nama file Excel sumber tanpa melibatkan ekstensi.</li><li>Eksekusi skrip SQL data secara berurutan untuk menghindari kesalahan karena terjadinya table lock.</li></ol><pre><div class="dark bg-gray-950 rounded-md border-[0.5px] border-token-border-medium"><div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md"><span>go</span><div class="flex items-center"><span class="" data-state="closed"><button class="flex gap-1 items-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg>Copy code</button></span></div></div><div class="overflow-y-auto p-4" dir="ltr"><code class="!whitespace-pre hljs language-go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"bufio"</span>
	<span class="hljs-string">"database/sql"</span>
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"os"</span>
	<span class="hljs-string">"path/filepath"</span>
	<span class="hljs-string">"regexp"</span>
	<span class="hljs-string">"runtime"</span>
	<span class="hljs-string">"strconv"</span>
	<span class="hljs-string">"strings"</span>
	<span class="hljs-string">"sync"</span>
	<span class="hljs-string">"time"</span>

	_ <span class="hljs-string">"github.com/go-sql-driver/mysql"</span>
	<span class="hljs-string">"github.com/xuri/excelize/v2"</span>
)

<span class="hljs-comment">// Config holds the configuration read from db.cfg</span>
<span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> {
	Username <span class="hljs-type">string</span>
	Password <span class="hljs-type">string</span>
	Database <span class="hljs-type">string</span>
	Host     <span class="hljs-type">string</span>
	Port     <span class="hljs-type">string</span>
	ExcelDir <span class="hljs-type">string</span>
}

<span class="hljs-comment">// readConfig reads the configuration from db.cfg</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readConfig</span><span class="hljs-params">()</span></span> (Config, <span class="hljs-type">error</span>) {
	file, err := os.Open(<span class="hljs-string">"db.cfg"</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"error opening config file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> file.Close()

	scanner := bufio.NewScanner(file)
	<span class="hljs-keyword">var</span> lines []<span class="hljs-type">string</span>
	<span class="hljs-keyword">for</span> scanner.Scan() {
		lines = <span class="hljs-built_in">append</span>(lines, scanner.Text())
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines) &lt; <span class="hljs-number">6</span> {
		<span class="hljs-keyword">return</span> Config{}, fmt.Errorf(<span class="hljs-string">"config file format invalid"</span>)
	}

	config := Config{
		Username: lines[<span class="hljs-number">0</span>],
		Password: lines[<span class="hljs-number">1</span>],
		Database: lines[<span class="hljs-number">2</span>],
		Host:     lines[<span class="hljs-number">3</span>],
		Port:     lines[<span class="hljs-number">4</span>],
		ExcelDir: lines[<span class="hljs-number">5</span>],
	}

	<span class="hljs-keyword">return</span> config, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// connectDB creates a connection pool to the MariaDB database</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">connectDB</span><span class="hljs-params">(cfg Config)</span></span> (*sql.DB, <span class="hljs-type">error</span>) {
	<span class="hljs-keyword">var</span> dsn <span class="hljs-type">string</span>
	<span class="hljs-keyword">if</span> runtime.GOOS == <span class="hljs-string">"linux"</span> &amp;&amp; cfg.Host == <span class="hljs-string">"localhost"</span> {
		dsn = fmt.Sprintf(<span class="hljs-string">"%s:%s@unix(/var/run/mysqld/mysqld.sock)/%s"</span>,
			cfg.Username, cfg.Password, cfg.Database)
	} <span class="hljs-keyword">else</span> {
		dsn = fmt.Sprintf(<span class="hljs-string">"%s:%s@tcp(%s:%s)/%s"</span>,
			cfg.Username, cfg.Password, cfg.Host, cfg.Port, cfg.Database)
	}
	db, err := sql.Open(<span class="hljs-string">"mysql"</span>, dsn)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> db, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// sanitizeString removes non-alphanumeric characters from a string and converts to lowercase</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeString</span><span class="hljs-params">(input <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	reg, _ := regexp.Compile(<span class="hljs-string">"[^a-zA-Z0-9]+"</span>)
	<span class="hljs-keyword">return</span> strings.ToLower(reg.ReplaceAllString(input, <span class="hljs-string">""</span>))
}

<span class="hljs-comment">// sanitizeSQLValue ensures SQL values are properly escaped and safe</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sanitizeSQLValue</span><span class="hljs-params">(value <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> {
	value = strings.ReplaceAll(value, <span class="hljs-string">"'"</span>, <span class="hljs-string">"''"</span>)
	<span class="hljs-keyword">return</span> value
}

<span class="hljs-comment">// readExcelFiles reads all Excel files from the specified directory</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">readExcelFiles</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> ([]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) {
	files, err := filepath.Glob(filepath.Join(dir, <span class="hljs-string">"*.xlsx"</span>))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, fmt.Errorf(<span class="hljs-string">"error reading excel files: %v"</span>, err)
	}
	<span class="hljs-keyword">return</span> files, <span class="hljs-literal">nil</span>
}

<span class="hljs-comment">// isUniqueColumn checks if a column contains unique values</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">isUniqueColumn</span><span class="hljs-params">(columnData []<span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> {
	uniqueValues := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">bool</span>)
	<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> columnData {
		<span class="hljs-keyword">if</span> _, exists := uniqueValues[value]; exists {
			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
		}
		uniqueValues[value] = <span class="hljs-literal">true</span>
	}
	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
}

<span class="hljs-comment">// processExcelFile processes an individual Excel file and generates SQL scripts</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processExcelFile</span><span class="hljs-params">(db *sql.DB, wg *sync.WaitGroup, filePath <span class="hljs-type">string</span>, results <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>, errorLog *os.File)</span></span> {
	<span class="hljs-keyword">defer</span> wg.Done()

	start := time.Now()
	f, err := excelize.OpenFile(filePath)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error opening excel file %s: %v"</span>, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	sheetName := f.GetSheetName(<span class="hljs-number">0</span>)
	rows, err := f.GetRows(sheetName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error reading rows from sheet %s in file %s: %v"</span>, sheetName, filePath, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(rows) &lt; <span class="hljs-number">2</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"not enough data in file %s"</span>, filePath)
		<span class="hljs-keyword">return</span>
	}

	tableName := sanitizeString(strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	createSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, tableName))
	dataSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, tableName))
	errorSQLFileName := filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData_cek.sql"</span>, tableName))

	<span class="hljs-comment">// Create "hasil" directory if it doesn't exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(<span class="hljs-string">"hasil"</span>); os.IsNotExist(err) {
		err = os.Mkdir(<span class="hljs-string">"hasil"</span>, <span class="hljs-number">0755</span>)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating directory 'hasil': %v"</span>, err)
			<span class="hljs-keyword">return</span>
		}
	}

	<span class="hljs-comment">// Remove existing files if they exist</span>
	<span class="hljs-keyword">if</span> _, err := os.Stat(createSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(createSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, createSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(dataSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(dataSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, dataSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}
	<span class="hljs-keyword">if</span> _, err := os.Stat(errorSQLFileName); err == <span class="hljs-literal">nil</span> {
		err = os.Remove(errorSQLFileName)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			results &lt;- fmt.Sprintf(<span class="hljs-string">"error removing existing SQL file %s: %v"</span>, errorSQLFileName, err)
			<span class="hljs-keyword">return</span>
		}
	}

	createSQLFile, err := os.Create(createSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> createSQLFile.Close()

	dataSQLFile, err := os.Create(dataSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, dataSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> dataSQLFile.Close()

	errorSQLFile, err := os.Create(errorSQLFileName)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error creating SQL file %s: %v"</span>, errorSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}
	<span class="hljs-keyword">defer</span> errorSQLFile.Close()

	headers := rows[<span class="hljs-number">0</span>]
	columnNames := []<span class="hljs-type">string</span>{}
	columnLengths := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-built_in">len</span>(headers))
	columnData := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(headers))
	<span class="hljs-keyword">for</span> _, header := <span class="hljs-keyword">range</span> headers {
		columnName := sanitizeString(header)
		columnNames = <span class="hljs-built_in">append</span>(columnNames, columnName)
	}

	createSQL := fmt.Sprintf(<span class="hljs-string">"CREATE TABLE IF NOT EXISTS %s ("</span>, tableName)
	columns := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> i, columnName := <span class="hljs-keyword">range</span> columnNames {
		columnType := <span class="hljs-string">"VARCHAR(255)"</span> <span class="hljs-comment">// Default type</span>
		<span class="hljs-keyword">for</span> _, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
			<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) &gt; i {
				value := row[i]
				length := <span class="hljs-built_in">len</span>(value)
				<span class="hljs-keyword">if</span> length &gt; columnLengths[i] {
					columnLengths[i] = length
				}
				columnData[i] = <span class="hljs-built_in">append</span>(columnData[i], value)
				<span class="hljs-keyword">if</span> _, err := strconv.Atoi(value); err == <span class="hljs-literal">nil</span> {
					<span class="hljs-keyword">if</span> length &lt;= <span class="hljs-number">10</span> {
						columnType = <span class="hljs-string">"INT"</span>
					} <span class="hljs-keyword">else</span> {
						columnType = fmt.Sprintf(<span class="hljs-string">"VARCHAR(%d)"</span>, columnLengths[i])
					}
				} <span class="hljs-keyword">else</span> {
					columnType = fmt.Sprintf(<span class="hljs-string">"VARCHAR(%d)"</span>, columnLengths[i])
				}
			}
		}
		columnDefinition := fmt.Sprintf(<span class="hljs-string">"%s %s COMMENT '%s'"</span>, columnName, columnType, headers[i])
		<span class="hljs-keyword">if</span> isUniqueColumn(columnData[i]) {
			columnDefinition += <span class="hljs-string">" UNIQUE"</span>
		}
		columns = <span class="hljs-built_in">append</span>(columns, columnDefinition)
	}
	createSQL += strings.Join(columns, <span class="hljs-string">", "</span>) + fmt.Sprintf(<span class="hljs-string">") COMMENT = '%s';"</span>, strings.TrimSuffix(filepath.Base(filePath), filepath.Ext(filePath)))
	_, err = createSQLFile.WriteString(createSQL)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to SQL file %s: %v"</span>, createSQLFileName, err)
		<span class="hljs-keyword">return</span>
	}

	<span class="hljs-comment">// Prepare insert statements</span>
	dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)

	<span class="hljs-keyword">var</span> errorRows []<span class="hljs-type">string</span>
	batchSize := <span class="hljs-number">10</span>
	<span class="hljs-keyword">for</span> i, row := <span class="hljs-keyword">range</span> rows[<span class="hljs-number">1</span>:] {
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(row) != <span class="hljs-built_in">len</span>(columnNames) {
			<span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(row) &lt; <span class="hljs-built_in">len</span>(columnNames) {
				row = <span class="hljs-built_in">append</span>(row, <span class="hljs-string">"NA"</span>)
			}
		}
		values := []<span class="hljs-type">string</span>{}
		<span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> row {
			values = <span class="hljs-built_in">append</span>(values, fmt.Sprintf(<span class="hljs-string">"'%s'"</span>, sanitizeSQLValue(value)))
		}
		<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(values) != <span class="hljs-built_in">len</span>(columnNames) {
			errorRows = <span class="hljs-built_in">append</span>(errorRows, fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s (%s) VALUES (%s);"</span>, tableName, strings.Join(columnNames, <span class="hljs-string">", "</span>), strings.Join(values, <span class="hljs-string">", "</span>)))
			<span class="hljs-keyword">continue</span>
		}
		<span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> &amp;&amp; i%batchSize == <span class="hljs-number">0</span> {
			dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)
			dataSQLFile.WriteString(fmt.Sprintf(<span class="hljs-string">"INSERT INTO %s ("</span>, tableName) + strings.Join(columnNames, <span class="hljs-string">", "</span>) + <span class="hljs-string">") VALUES\n"</span>)
		}
		dataSQLFile.WriteString(<span class="hljs-string">"("</span> + strings.Join(values, <span class="hljs-string">", "</span>) + <span class="hljs-string">")"</span>)
		<span class="hljs-keyword">if</span> (i+<span class="hljs-number">1</span>)%batchSize != <span class="hljs-number">0</span> {
			dataSQLFile.WriteString(<span class="hljs-string">",\n"</span>)
		} <span class="hljs-keyword">else</span> {
			dataSQLFile.WriteString(<span class="hljs-string">"\n"</span>)
		}
	}
	dataSQLFile.WriteString(<span class="hljs-string">";\n"</span>)

	<span class="hljs-comment">// Write error rows to separate file</span>
	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(errorRows) &gt; <span class="hljs-number">0</span> {
		<span class="hljs-keyword">for</span> _, errorRow := <span class="hljs-keyword">range</span> errorRows {
			_, err = errorSQLFile.WriteString(errorRow + <span class="hljs-string">"\n"</span>)
			<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
				results &lt;- fmt.Sprintf(<span class="hljs-string">"error writing to error SQL file %s: %v"</span>, errorSQLFileName, err)
				<span class="hljs-keyword">return</span>
			}
		}
	}

	duration := time.Since(start)
	results &lt;- fmt.Sprintf(<span class="hljs-string">"Processed file %s in %v"</span>, filePath, duration)
}

<span class="hljs-comment">// executeSQLFiles executes the SQL files in the specified order</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">executeSQLFiles</span><span class="hljs-params">(db *sql.DB, sqlFiles []<span class="hljs-type">string</span>, errorLog *os.File)</span></span> <span class="hljs-type">error</span> {
	<span class="hljs-keyword">for</span> _, sqlFile := <span class="hljs-keyword">range</span> sqlFiles {
		start := time.Now()

		file, err := os.Open(sqlFile)
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
			<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"error opening SQL file %s: %v"</span>, sqlFile, err)
		}
		<span class="hljs-keyword">defer</span> file.Close()

		scanner := bufio.NewScanner(file)
		<span class="hljs-keyword">var</span> query <span class="hljs-type">string</span>
		<span class="hljs-keyword">for</span> scanner.Scan() {
			line := scanner.Text()
			query += line
			<span class="hljs-keyword">if</span> strings.HasSuffix(line, <span class="hljs-string">";"</span>) {
				query = strings.TrimSpace(query)
				<span class="hljs-keyword">if</span> query == <span class="hljs-string">""</span> {
					<span class="hljs-keyword">continue</span>
				}

				_, err := db.Exec(query)
				<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
					errorMessage := fmt.Sprintf(<span class="hljs-string">"[%v] error executing query in file %s: %v\n"</span>, time.Now(), sqlFile, err)
					log.Printf(errorMessage)
					<span class="hljs-keyword">if</span> _, err := errorLog.WriteString(errorMessage); err != <span class="hljs-literal">nil</span> {
						<span class="hljs-keyword">return</span> fmt.Errorf(<span class="hljs-string">"error writing to error log: %v"</span>, err)
					}
					<span class="hljs-keyword">continue</span>
				}
				query = <span class="hljs-string">""</span>
			}
		}

		duration := time.Since(start)
		fmt.Printf(<span class="hljs-string">"Executed file %s in %v\n"</span>, sqlFile, duration)
	}
	<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
}

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
	start := time.Now()

	config, err := readConfig()
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error reading config: %v"</span>, err)
	}

	db, err := connectDB(config)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error connecting to database: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> db.Close()

	errorLogFile, err := os.OpenFile(<span class="hljs-string">"error.log"</span>, os.O_APPEND|os.O_CREATE|os.O_WRONLY, <span class="hljs-number">0644</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error opening error log file: %v"</span>, err)
	}
	<span class="hljs-keyword">defer</span> errorLogFile.Close()

	files, err := readExcelFiles(config.ExcelDir)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error reading Excel files: %v"</span>, err)
	}

	<span class="hljs-keyword">var</span> wg sync.WaitGroup
	results := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-built_in">len</span>(files))

	<span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files {
		wg.Add(<span class="hljs-number">1</span>)
		<span class="hljs-keyword">go</span> processExcelFile(db, &amp;wg, file, results, errorLogFile)
	}

	wg.Wait()
	<span class="hljs-built_in">close</span>(results)

	sqlFiles := []<span class="hljs-type">string</span>{}
	<span class="hljs-keyword">for</span> result := <span class="hljs-keyword">range</span> results {
		fmt.Println(result)
		<span class="hljs-keyword">if</span> strings.Contains(result, <span class="hljs-string">"Processed file"</span>) {
			fileName := strings.Split(result, <span class="hljs-string">" "</span>)[<span class="hljs-number">2</span>]
			baseName := sanitizeString(strings.TrimSuffix(filepath.Base(fileName), filepath.Ext(fileName)))
			sqlFiles = <span class="hljs-built_in">append</span>(sqlFiles, filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sTbl.sql"</span>, baseName)))
			sqlFiles = <span class="hljs-built_in">append</span>(sqlFiles, filepath.Join(<span class="hljs-string">"hasil"</span>, fmt.Sprintf(<span class="hljs-string">"%sData.sql"</span>, baseName)))
		}
	}

	err = executeSQLFiles(db, sqlFiles, errorLogFile)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> {
		log.Fatalf(<span class="hljs-string">"Error executing SQL files: %v"</span>, err)
	}

	totalDuration := time.Since(start)
	fmt.Printf(<span class="hljs-string">"Total time taken: %v\n"</span>, totalDuration)
}
</code></div></div></pre><h3>Penjelasan Perbaikan:</h3><ol><li><strong>Koneksi Database</strong>: Menggunakan koneksi socket jika host adalah localhost pada sistem operasi Linux, selain itu menggunakan koneksi TCP.</li><li><strong>Indeks pada Kolom Unik</strong>: Memeriksa apakah data pada suatu kolom adalah unik dan menambahkan indeks pada kolom tersebut jika benar.</li><li><strong>Sanitasi dan Escape SQL</strong>: Menambahkan fungsi <code>sanitizeSQLValue</code> untuk memastikan nilai SQL di-escape dengan benar.</li><li><strong>Pembagian Insert Statements</strong>: Setiap pernyataan <code>INSERT</code> hanya memuat 10 baris data untuk mendukung eksekusi paralel dan pooling koneksi.</li><li><strong>Penanganan Error</strong>: Program menangani error yang terjadi saat eksekusi SQL tanpa menghentikan proses, mencatat error ke file <code>error.log</code>, dan melanjutkan ke proses berikutnya.</li><li><strong>Pengelolaan Kolom Data</strong>: Menambahkan data <code>NA</code> jika jumlah kolom data kurang agar sesuai dengan jumlah kolom tabel database.</li><li><strong>Pelaporan Waktu</strong>: Program menampilkan waktu yang digunakan untuk memproses setiap file Excel, mengeksekusi setiap file SQL, dan total waktu program dari awal hingga akhir.</li></ol></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 z-10 -mt-1 bg-token-main-surface-primary md:absolute md:border md:border-token-border-light md:hidden"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r6l:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M19.898.855a.4.4 0 0 0-.795 0c-.123 1.064-.44 1.802-.943 2.305-.503.503-1.241.82-2.306.943a.4.4 0 0 0 .001.794c1.047.119 1.801.436 2.317.942.512.504.836 1.241.93 2.296a.4.4 0 0 0 .796 0c.09-1.038.413-1.792.93-2.308.515-.516 1.269-.839 2.306-.928a.4.4 0 0 0 .001-.797c-1.055-.094-1.792-.418-2.296-.93-.506-.516-.823-1.27-.941-2.317Z"></path><path fill="currentColor" d="M12.001 1.5a1 1 0 0 1 .993.887c.313 2.77 1.153 4.775 2.5 6.146 1.34 1.366 3.3 2.223 6.095 2.47a1 1 0 0 1-.003 1.993c-2.747.238-4.75 1.094-6.123 2.467-1.373 1.374-2.229 3.376-2.467 6.123a1 1 0 0 1-1.992.003c-.248-2.795-1.105-4.754-2.47-6.095-1.372-1.347-3.376-2.187-6.147-2.5a1 1 0 0 1-.002-1.987c2.818-.325 4.779-1.165 6.118-2.504 1.339-1.34 2.179-3.3 2.504-6.118A1 1 0 0 1 12 1.5ZM6.725 11.998c1.234.503 2.309 1.184 3.21 2.069.877.861 1.56 1.888 2.063 3.076.5-1.187 1.18-2.223 2.051-3.094.871-.87 1.907-1.55 3.094-2.05-1.188-.503-2.215-1.187-3.076-2.064-.885-.901-1.566-1.976-2.069-3.21-.505 1.235-1.19 2.3-2.081 3.192-.891.89-1.957 1.576-3.192 2.082Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-18" data-scroll-anchor="false"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="group/conversation-turn relative flex w-full min-w-0 flex-col"><div class="flex-col gap-1 md:gap-3"><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="user" data-message-id="aaa24bd9-79ee-4859-a72b-24579d603de6" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden items-end rtl:items-start"><div class="relative max-w-[70%] rounded-3xl bg-[#f4f4f4] px-5 py-2.5 dark:bg-token-main-surface-secondary"><div>program sudah berhasil dibuat, sesuai harapan, terima kasih atas bantuannya.
dengan percakapan ini saya lebih mengerti fungsi programmer di era kecerdasan buatan</div><div class="absolute bottom-0 right-full top-0 -mr-3.5 hidden pr-5 pt-1 [.group\/conversation-turn:hover_&amp;]:block"><span class="" data-state="closed"><button class="flex h-9 w-9 items-center justify-center rounded-full text-token-text-secondary transition hover:bg-token-main-surface-tertiary"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md"><path fill="currentColor" fill-rule="evenodd" d="M13.293 4.293a4.536 4.536 0 1 1 6.414 6.414l-1 1-7.094 7.094A5 5 0 0 1 8.9 20.197l-4.736.79a1 1 0 0 1-1.15-1.151l.789-4.736a5 5 0 0 1 1.396-2.713zM13 7.414l-6.386 6.387a3 3 0 0 0-.838 1.628l-.56 3.355 3.355-.56a3 3 0 0 0 1.628-.837L16.586 11zm5 2.172L14.414 6l.293-.293a2.536 2.536 0 0 1 3.586 3.586z" clip-rule="evenodd"></path></svg></button></span></div></div></div></div></div></div></div></div></div></div><div class="w-full text-token-text-primary" dir="auto" data-testid="conversation-turn-19" data-scroll-anchor="true"><div class="text-base py-[18px] px-3 md:px-4 m-auto md:px-5 lg:px-1 xl:px-5"><div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]"><div class="flex-shrink-0 flex flex-col relative items-end"><div><div class="pt-0"><div class="gizmo-bot-avatar flex h-8 w-8 items-center justify-center overflow-hidden rounded-full"><div class="relative p-1 rounded-sm flex items-center justify-center bg-token-main-surface-primary text-token-text-primary h-8 w-8"><svg width="41" height="41" viewBox="0 0 41 41" fill="none" xmlns="http://www.w3.org/2000/svg" class="icon-md" role="img"><text x="-9999" y="-9999">ChatGPT</text><path d="M37.5324 16.8707C37.9808 15.5241 38.1363 14.0974 37.9886 12.6859C37.8409 11.2744 37.3934 9.91076 36.676 8.68622C35.6126 6.83404 33.9882 5.3676 32.0373 4.4985C30.0864 3.62941 27.9098 3.40259 25.8215 3.85078C24.8796 2.7893 23.7219 1.94125 22.4257 1.36341C21.1295 0.785575 19.7249 0.491269 18.3058 0.500197C16.1708 0.495044 14.0893 1.16803 12.3614 2.42214C10.6335 3.67624 9.34853 5.44666 8.6917 7.47815C7.30085 7.76286 5.98686 8.3414 4.8377 9.17505C3.68854 10.0087 2.73073 11.0782 2.02839 12.312C0.956464 14.1591 0.498905 16.2988 0.721698 18.4228C0.944492 20.5467 1.83612 22.5449 3.268 24.1293C2.81966 25.4759 2.66413 26.9026 2.81182 28.3141C2.95951 29.7256 3.40701 31.0892 4.12437 32.3138C5.18791 34.1659 6.8123 35.6322 8.76321 36.5013C10.7141 37.3704 12.8907 37.5973 14.9789 37.1492C15.9208 38.2107 17.0786 39.0587 18.3747 39.6366C19.6709 40.2144 21.0755 40.5087 22.4946 40.4998C24.6307 40.5054 26.7133 39.8321 28.4418 38.5772C30.1704 37.3223 31.4556 35.5506 32.1119 33.5179C33.5027 33.2332 34.8167 32.6547 35.9659 31.821C37.115 30.9874 38.0728 29.9178 38.7752 28.684C39.8458 26.8371 40.3023 24.6979 40.0789 22.5748C39.8556 20.4517 38.9639 18.4544 37.5324 16.8707ZM22.4978 37.8849C20.7443 37.8874 19.0459 37.2733 17.6994 36.1501C17.7601 36.117 17.8666 36.0586 17.936 36.0161L25.9004 31.4156C26.1003 31.3019 26.2663 31.137 26.3813 30.9378C26.4964 30.7386 26.5563 30.5124 26.5549 30.2825V19.0542L29.9213 20.998C29.9389 21.0068 29.9541 21.0198 29.9656 21.0359C29.977 21.052 29.9842 21.0707 29.9867 21.0902V30.3889C29.9842 32.375 29.1946 34.2791 27.7909 35.6841C26.3872 37.0892 24.4838 37.8806 22.4978 37.8849ZM6.39227 31.0064C5.51397 29.4888 5.19742 27.7107 5.49804 25.9832C5.55718 26.0187 5.66048 26.0818 5.73461 26.1244L13.699 30.7248C13.8975 30.8408 14.1233 30.902 14.3532 30.902C14.583 30.902 14.8088 30.8408 15.0073 30.7248L24.731 25.1103V28.9979C24.7321 29.0177 24.7283 29.0376 24.7199 29.0556C24.7115 29.0736 24.6988 29.0893 24.6829 29.1012L16.6317 33.7497C14.9096 34.7416 12.8643 35.0097 10.9447 34.4954C9.02506 33.9811 7.38785 32.7263 6.39227 31.0064ZM4.29707 13.6194C5.17156 12.0998 6.55279 10.9364 8.19885 10.3327C8.19885 10.4013 8.19491 10.5228 8.19491 10.6071V19.808C8.19351 20.0378 8.25334 20.2638 8.36823 20.4629C8.48312 20.6619 8.64893 20.8267 8.84863 20.9404L18.5723 26.5542L15.206 28.4979C15.1894 28.5089 15.1703 28.5155 15.1505 28.5173C15.1307 28.5191 15.1107 28.516 15.0924 28.5082L7.04046 23.8557C5.32135 22.8601 4.06716 21.2235 3.55289 19.3046C3.03862 17.3858 3.30624 15.3413 4.29707 13.6194ZM31.955 20.0556L22.2312 14.4411L25.5976 12.4981C25.6142 12.4872 25.6333 12.4805 25.6531 12.4787C25.6729 12.4769 25.6928 12.4801 25.7111 12.4879L33.7631 17.1364C34.9967 17.849 36.0017 18.8982 36.6606 20.1613C37.3194 21.4244 37.6047 22.849 37.4832 24.2684C37.3617 25.6878 36.8382 27.0432 35.9743 28.1759C35.1103 29.3086 33.9415 30.1717 32.6047 30.6641C32.6047 30.5947 32.6047 30.4733 32.6047 30.3889V21.188C32.6066 20.9586 32.5474 20.7328 32.4332 20.5338C32.319 20.3348 32.154 20.1698 31.955 20.0556ZM35.3055 15.0128C35.2464 14.9765 35.1431 14.9142 35.069 14.8717L27.1045 10.2712C26.906 10.1554 26.6803 10.0943 26.4504 10.0943C26.2206 10.0943 25.9948 10.1554 25.7963 10.2712L16.0726 15.8858V11.9982C16.0715 11.9783 16.0753 11.9585 16.0837 11.9405C16.0921 11.9225 16.1048 11.9068 16.1207 11.8949L24.1719 7.25025C25.4053 6.53903 26.8158 6.19376 28.2383 6.25482C29.6608 6.31589 31.0364 6.78077 32.2044 7.59508C33.3723 8.40939 34.2842 9.53945 34.8334 10.8531C35.3826 12.1667 35.5464 13.6095 35.3055 15.0128ZM14.2424 21.9419L10.8752 19.9981C10.8576 19.9893 10.8423 19.9763 10.8309 19.9602C10.8195 19.9441 10.8122 19.9254 10.8098 19.9058V10.6071C10.8107 9.18295 11.2173 7.78848 11.9819 6.58696C12.7466 5.38544 13.8377 4.42659 15.1275 3.82264C16.4173 3.21869 17.8524 2.99464 19.2649 3.1767C20.6775 3.35876 22.0089 3.93941 23.1034 4.85067C23.0427 4.88379 22.937 4.94215 22.8668 4.98473L14.9024 9.58517C14.7025 9.69878 14.5366 9.86356 14.4215 10.0626C14.3065 10.2616 14.2466 10.4877 14.2479 10.7175L14.2424 21.9419ZM16.071 17.9991L20.4018 15.4978L24.7325 17.9975V22.9985L20.4018 25.4983L16.071 22.9985V17.9991Z" fill="currentColor"></path></svg></div></div></div></div></div><div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn"><div class="flex-col gap-1 md:gap-3"><div class="inline-block"><button class="my-1 flex items-center gap-1 text-sm font-semibold outline-none text-token-text-tertiary" type="button" aria-haspopup="dialog" aria-expanded="false" aria-controls="radix-:r6p:" data-state="closed"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 18 18" class="mb-[-1px]"><path fill="currentColor" d="M6 3a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2zM7 3v12h1.18l.31-1.548a1.5 1.5 0 0 1 .41-.766l3.393-3.393A2.4 2.4 0 0 1 14 8.586V3.5a.5.5 0 0 0-.5-.5z"></path><path fill="currentColor" d="m11.351 15.53-1.616.323a.5.5 0 0 1-.588-.588l.323-1.617a.5.5 0 0 1 .137-.255L13 10a1.414 1.414 0 1 1 2 2l-3.393 3.393a.5.5 0 0 1-.256.137"></path></svg>Memory updated</button></div><div class="flex flex-grow flex-col max-w-full"><div data-message-author-role="assistant" data-message-id="7c7875ab-52b8-4881-93a6-9e721bbe8169" dir="auto" class="min-h-[20px] text-message flex w-full flex-col items-end gap-2 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto"><div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]"><div class="markdown prose w-full break-words dark:prose-invert dark"><p>Saya senang mendengar bahwa programnya sudah berhasil dan bermanfaat untuk Anda! Jika Anda ada pertanyaan lain atau butuh bantuan lebih lanjut di masa depan, jangan ragu untuk bertanya. Selamat coding! 😊</p></div></div></div></div><div class="mt-1 flex gap-3 empty:hidden -ml-2"><div class="items-center justify-start rounded-xl p-1 flex"><div class="flex items-center"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11 4.91a.5.5 0 0 0-.838-.369L6.676 7.737A1 1 0 0 1 6 8H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2a1 1 0 0 1 .676.263l3.486 3.196A.5.5 0 0 0 11 19.09zM8.81 3.067C10.415 1.597 13 2.735 13 4.91v14.18c0 2.175-2.586 3.313-4.19 1.843L5.612 18H4a3 3 0 0 1-3-3V9a3 3 0 0 1 3-3h1.611zm11.507 3.29a1 1 0 0 1 1.355.401A10.96 10.96 0 0 1 23 12c0 1.85-.458 3.597-1.268 5.13a1 1 0 1 1-1.768-.934A8.96 8.96 0 0 0 21 12a8.96 8.96 0 0 0-1.085-4.287 1 1 0 0 1 .402-1.356M15.799 7.9a1 1 0 0 1 1.4.2 6.48 6.48 0 0 1 1.3 3.9c0 1.313-.39 2.537-1.06 3.56a1 1 0 0 1-1.673-1.096A4.47 4.47 0 0 0 16.5 12a4.47 4.47 0 0 0-.9-2.7 1 1 0 0 1 .2-1.4" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M7 5a3 3 0 0 1 3-3h9a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-2v2a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h2zm2 2h5a3 3 0 0 1 3 3v5h2a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1h-9a1 1 0 0 0-1 1zM5 9a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h9a1 1 0 0 0 1-1v-9a1 1 0 0 0-1-1z" clip-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" d="M3.07 10.876C3.623 6.436 7.41 3 12 3a9.15 9.15 0 0 1 6.012 2.254V4a1 1 0 1 1 2 0v4a1 1 0 0 1-1 1H15a1 1 0 1 1 0-2h1.957A7.15 7.15 0 0 0 12 5a7 7 0 0 0-6.946 6.124 1 1 0 1 1-1.984-.248m16.992 1.132a1 1 0 0 1 .868 1.116C20.377 17.564 16.59 21 12 21a9.15 9.15 0 0 1-6-2.244V20a1 1 0 1 1-2 0v-4a1 1 0 0 1 1-1h4a1 1 0 1 1 0 2H7.043A7.15 7.15 0 0 0 12 19a7 7 0 0 0 6.946-6.124 1 1 0 0 1 1.116-.868"></path></svg></span></button></span><div class="flex"><span class="" data-state="closed"><button class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md-heavy"><path fill="currentColor" fill-rule="evenodd" d="M11.873 21.496a1 1 0 0 1-.992.496l-.454-.056A4 4 0 0 1 7.1 16.79L7.65 15h-.718c-2.637 0-4.553-2.508-3.859-5.052l1.364-5A4 4 0 0 1 8.296 2h9.709a3 3 0 0 1 3 3v7a3 3 0 0 1-3 3h-2c-.26 0-.5.14-.628.364zM14.005 4h-5.71a2 2 0 0 0-1.929 1.474l-1.363 5A2 2 0 0 0 6.933 13h2.072a1 1 0 0 1 .955 1.294l-.949 3.084a2 2 0 0 0 1.462 2.537l3.167-5.543a2.72 2.72 0 0 1 1.364-1.182V5a1 1 0 0 0-1-1m3 9V5c0-.35-.06-.687-.171-1h1.17a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1z" clip-rule="evenodd"></path></svg></span></button></span></div><span class="" data-state="closed"><button type="button" id="radix-:r6u:" aria-haspopup="menu" aria-expanded="false" data-state="closed" class="cursor-pointer h-[30px] rounded-md px-1 text-token-text-secondary hover:bg-token-main-surface-secondary"><div class="flex items-center pb-0"><div class="[&amp;_svg]:h-full [&amp;_svg]:w-full icon-md h-4 w-4"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" d="M13.091 4.246 4.682 14H11a1 1 0 0 1 .973 1.23l-1.064 4.524L19.318 10H13a1 1 0 0 1-.973-1.229l1.064-4.525Zm-.848-2.08c1.195-1.386 3.448-.238 3.029 1.544L14.262 8h5.056c1.711 0 2.632 2.01 1.514 3.306l-9.075 10.528c-1.195 1.386-3.448.238-3.029-1.544L9.738 16H4.681c-1.711 0-2.632-2.01-1.514-3.306l9.075-10.527Z"></path></svg></div><span class="overflow-hidden text-clip whitespace-nowrap text-sm" style="opacity: 0; padding-left: 0px; width: 0px;">4o mini</span><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-sm text-token-text-quaternary"><path fill="currentColor" fill-rule="evenodd" d="M5.293 9.293a1 1 0 0 1 1.414 0L12 14.586l5.293-5.293a1 1 0 1 1 1.414 1.414l-6 6a1 1 0 0 1-1.414 0l-6-6a1 1 0 0 1 0-1.414" clip-rule="evenodd"></path></svg></div></button></span></div></div></div><div class="pr-2 lg:pr-0"></div><div class="mt-3 w-full empty:hidden"><div class="text-center"></div></div></div></div></div></div></div><button class="cursor-pointer absolute z-10 rounded-full bg-clip-padding border text-token-text-secondary border-token-border-light right-1/2 translate-x-1/2 bg-token-main-surface-primary bottom-5"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" class="icon-md m-1 text-token-text-primary"><path fill="currentColor" fill-rule="evenodd" d="M12 21a1 1 0 0 1-.707-.293l-7-7a1 1 0 1 1 1.414-1.414L11 17.586V4a1 1 0 1 1 2 0v13.586l5.293-5.293a1 1 0 0 1 1.414 1.414l-7 7A1 1 0 0 1 12 21" clip-rule="evenodd"></path></svg></button></div></div><button class="react-scroll-to-bottom--css-cxptu-1tj0vk3 hidden" type="button"></button></div></div></div>
